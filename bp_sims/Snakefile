s_vals = [1e-1,1e-2,1e-3]
n_vals = [1,2,100,1000,10000]
mu_vals = [1e-6,1e-7]
dens_vals = [100]
L_vals = [1000]
maxcount = [10000]
seeds = [0]
sigma_vals = [10]
num_iter = [10000000]
#extensions = ["sfs","loc"]
samp_rate = [0.1]
samp_type_unif = ["uniform"]
samp_type_gaus = ["gaussian_w10","gaussian_w20","gaussian_w100","gaussian_w500","gaussian_w1000","gaussian_w10000"]

rule all:
    input:
        expand("plots/{samp_type}/s{s_vals}_n{n_vals}_mu{mu_vals}_rho{dens_vals}_L{L_vals}_maxcount{maxcount}_sigma{sigma_vals}_seed{seeds}_iter{num_iter}_r{samp_rate}_{samp_type}.png",
               s_vals=s_vals,n_vals=n_vals,mu_vals=mu_vals,dens_vals=dens_vals,L_vals=L_vals,maxcount=maxcount,sigma_vals=sigma_vals,seeds=seeds,num_iter=num_iter,
               samp_rate=samp_rate,samp_type=samp_type_unif),
        expand("plots/{samp_type}/s{s_vals}_n{n_vals}_mu{mu_vals}_rho{dens_vals}_L{L_vals}_maxcount{maxcount}_sigma{sigma_vals}_seed{seeds}_iter{num_iter}_r{samp_rate}_{samp_type}.png",
               s_vals=s_vals,n_vals=n_vals,mu_vals=mu_vals,dens_vals=dens_vals,L_vals=L_vals,maxcount=maxcount,sigma_vals=sigma_vals,seeds=seeds,num_iter=num_iter,
               samp_rate=samp_rate,samp_type=samp_type_gaus)

rule run_sims_uniform:
    input:
    output:
        sfs="results/uniform/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_uniform.sfs",
        loc="results/uniform/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_uniform.loc",
        samp_p="results/uniform/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_uniform.samp",
    shell:
        """
        mkdir -p results/uniform
        start_time=$(date +%s)
        ~/.conda/envs/snakemake310/bin/python source/simulations.py -n {wildcards.n} -s {wildcards.s} --mu {wildcards.mu} --dens {wildcards.dens} -r {wildcards.r} \
            --sigma {wildcards.sigma} --num_iter {wildcards.iter} --max_allele_count {wildcards.maxcount} -L {wildcards.L} --sfs_out {output.sfs} \
            --loc_out {output.loc} --sampled_p_out {output.samp_p} --seed {wildcards.seed} 
        end_time=$(date +%s)
        echo "Execution time for output file {output.sfs}: $((end_time - start_time)) seconds" >> log_times_20240317.txt
        """

rule run_sims_gaussian:
    input:
    output:
        sfs="results/gaussian_w{w}/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_gaussian_w{w}.sfs",
        loc="results/gaussian_w{w}/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_gaussian_w{w}.loc",
        samp_p="results/gaussian_w{w}/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_gaussian_w{w}.samp",
    shell:
        """
        mkdir -p results/gaussian_w{wildcards.w}
        start_time=$(date +%s)
        ~/.conda/envs/snakemake310/bin/python source/simulations.py -n {wildcards.n} -s {wildcards.s} --mu {wildcards.mu} --dens {wildcards.dens} -r {wildcards.r} \
            --sigma {wildcards.sigma} --num_iter {wildcards.iter} --max_allele_count {wildcards.maxcount} -L {wildcards.L} --sfs_out {output.sfs} \
            --loc_out {output.loc} --sampled_p_out {output.samp_p} --seed {wildcards.seed} --gaussian -w {wildcards.w}
        end_time=$(date +%s)
        echo "Execution time for output file {output.sfs}: $((end_time - start_time)) seconds" >> log_times.txt
        """

rule plot_sfs_unif:
    input:
        sfs="results/uniform/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_uniform.sfs",
    output:
        plot="plots/uniform/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_uniform.png",
    shell:
        """
        mkdir -p plots/uniform
        python source/plot_sim_sfs.py --sfs_file {input.sfs} --filename {output.plot} --plot_theory
        """

rule plot_sfs_gaussian:
    input:
        sfs="results/gaussian_w{w}/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_gaussian_w{w}.sfs"
    output:
        plot="plots/gaussian_w{w}/s{s}_n{n}_mu{mu}_rho{dens}_L{L}_maxcount{maxcount}_sigma{sigma}_seed{seed}_iter{iter}_r{r}_gaussian_w{w}.png"
    shell:
        """
        mkdir -p plots/gaussian_w{wildcards.w}
        python source/plot_sim_sfs.py --sfs_file {input.sfs} --filename {output.plot} --plot_theory --gaussian -w {wildcards.w} --sigma {wildcards.sigma}
        """
